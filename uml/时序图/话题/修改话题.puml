@startuml
actor 用户 as u

participant "Gin 上下文" as c

control "控制器" as ctrl

entity "数据库" as db

u -> c : 使用PUT方法修改话题
c -> ctrl : 调用 TopicPut(c)
alt 参数错误
    ctrl -> c : 返回 400 错误 c.JSON(400, {"msg": "参数错误awa"})
else 参数正确
    ctrl -> db : 查询话题 db.First(&topic, "id = ?", id)
    db --> ctrl : 返回话题 topic
    alt 话题不存在
        ctrl -> c : 返回 404 错误 c.JSON(404, {"msg": "话题不存在Orz"})
    else 话题存在
        alt 无修改权限
            ctrl -> c : 返回 401 错误 c.JSON(401, {"msg": "没有修改权限Orz"})
        else 有修改权限
            ctrl -> db : 保存修改后的话题信息 db.Save(&topic)
            db --> ctrl : 返回保存结果
            alt 数据库错误
                ctrl -> c : 返回 500 错误 c.JSON(500, {"msg": "数据库错误Orz"})
            else 保存成功
                ctrl -> db : 删除原有标签 db.Where("topic_id = ?", topic.ID).Delete(&database.TopicTag)
                loop 添加新标签
                    ctrl -> db : 创建标签 db.Create(&database.TopicTag)
                    db --> ctrl : 返回创建结果
                end
                alt 是投票话题
                    ctrl -> db : 查询现有投票选项 db.Where("topic_id = ?", topic.ID).Find(&existingOptions)
                    db --> ctrl : 返回投票选项 existingOptions
                    loop 处理新的投票选项
                        alt 新增选项
                            ctrl -> db : 创建投票选项 db.Create(&database.VoteOption)
                            db --> ctrl : 返回创建结果
                        else 删除选项
                            ctrl -> db : 删除投票选项 db.Delete(&option)
                            db -> db : 删除相关投票记录 db.Where("vote_option_id = ?", option.ID).Delete(&database.VoteRecord)
                        end
                    end
                end
                ctrl -> ai : 调用 AI 接口生成话题总结
                ai --> ctrl : 返回 AI 总结
                ctrl -> c : 返回 200 响应 c.JSON(200, GetTopicAPI(topic, c))
            end
        end
    end
end
@enduml